## This is a the default configuration for gopherbot. Values here can be
## overridden by values in the custom configuration. Primarily configuration
## required on initial load is defined here; most configuration, as well as
## locally defined job/task/plugin scripts, should come from a custom
## configuration repository.

## Template functions:
## default "value":
##   provide a default value if "" or unset is piped in
## env "ENV_VAR":
##   look a value up from the environment
## decrypt "<encrypted string>":
##   decrypt a value encrypted with the 'encrypt <string>' command

## Port to listen on for http/JSON api calls, for external plugins
LocalPort: {{ env "GOPHER_PORT" | default "8080" }}

## Configure the robot connection protocol
{{ $proto := env "GOPHER_PROTOCOL" | default "terminal" }}
Protocol: {{ $proto }}

## Trivial "term" connector config for a single admin user.
{{ if eq $proto "terminal" }}
{{ $botname := env "GOPHER_BOTNAME" | default "floyd" }}
{{ $botfullname := env "GOPHER_BOTFULLNAME" | default "Floyd Gopherbot"}}
{{ $botalias := env "GOPHER_ALIAS" | default ";"}}

ProtocolConfig:
  StartChannel: general
  StartUser: alice
  Channels:
  - random
  - general
  Users:
  - Name: "alice"
    Email: "alice@example.com"
    InternalID: "u0001"
    FullName: "Alice User"
    FirstName: "Alice"
    LastName: "User"
    Phone: "(555)765-0001"

UserRoster:
- UserName: "alice"
  UserID: "u0001"

AdminUsers: [ "alice" ]
DefaultChannels: [ "general", "random" ]

BotInfo:
  UserName: {{ $botname }}
  FullName: {{ $botfullname }}

Alias: {{ $botalias }}

## Protocols other than "term"; normally overridden in custom/conf/gopherbot.yaml
{{ else }}

AdminUsers: [ {{ env "GOPHER_ADMIN" }} ]

BotInfo:
  UserName: {{ env "GOPHER_BOTNAME" }}
  FullName: {{ env "GOPHER_BOTFULLNAME" }}
  Email: {{ env "GOPHER_BOT_EMAIL" }}

Alias: {{ env "GOPHER_ALIAS" }}

{{ end }}

{{ $brain := env "GOPHER_BRAIN" | default "mem" }}
Brain: {{ $brain }}

{{ if eq $brain "file" }}
BrainConfig:
  BrainDirectory: {{ env "GOPHER_BRAIN_DIRECTORY" | default "private/brain" }}

{{ else if eq $brain "dynamo" }}
BrainConfig:
  TableName: {{ env "GOPHER_BRAIN_TABLE" }}
  Region: {{ env "GOPHER_BRAIN_REGION" | default "us-east-1" }}
  AccessKeyID: {{ env "GOPHER_BRAIN_KEY_ID" }}
  SecretAccessKey: {{ env "GOPHER_BRAIN_SECRET_KEY" }}

{{ end }}

# If a brain encryption key isn't provided, the admin can still
# set GOPHER_ENCRYPT_BRAIN="true" and supply the key interactively
{{ $default_brain_encrypt := "false" }}
{{ if env "GOPHER_ENCRYPTION_KEY" }}
  {{- $default_brain_encrypt = "true" }}
{{ end }}
EncryptBrain: {{ env "GOPHER_ENCRYPT_BRAIN" | default $default_brain_encrypt }}
## End brain config

## Key required for secrets, also used for brain encryption
EncryptionKey: {{ env "GOPHER_ENCRYPTION_KEY" }}

# Defaults for history and workspace directories, relative to the
# process working directory.
{{ $histdir := env "GOPHER_HISTORY_DIRECTORY" | default "history" }}
{{ $workdir := env "GOPHER_WORKSPACE_DIRECTORY" | default "workspace" }}

## Configure a history provider
{{ $history := env "GOPHER_HISTORY_PROVIDER" | default "file" }}
HistoryProvider: {{ $history }}

{{ if eq $history "file" }}
HistoryConfig:
  Directory: {{ $histdir }}
{{ end }}
## End history config

WorkSpace: {{ $workdir }}

## Configure log level; defaults to debug to aid in troubleshooting
## if custom configuration can't be loaded.
LogLevel: {{ env "GOPHER_LOGLEVEL" | default "debug" }}

## Later: modify this for other protocols
{{ $defaultjobchannel := "general" }}
DefaultJobChannel: {{ env "GOPHER_JOBCHANNEL" | default $defaultjobchannel }}

## NOTE:
## External script jobs/tasks/plugins do NOT have direct access to
## environment variables, but instead get a combination of:
## - vars explicitly propagated such as $HOME
## - vars defined in "Parameters" (see below)
## - vars provided interactively by an administrator with the
##   'store <"task"|"repository"> parameter <name> <var>=<value>' command;
##   normally used for secrets kept in an encrypted brain
##
## While some environment variables like GOPHER_SLACK_TOKEN or GOPHER_BRAIN_KEY
## need to come from the environment to allow the robot to start, others may
## be stored in the brain. The definitions below allow you to go either way,
## by e.g. setting 'GOPHER_OWM_APIKEY' in the environment, or by instead using
## 'store task parameter weather OWM_APIKEY=<value>'

ExternalPlugins:
## Useful and/or entertaining plugins; disable by setting 'Disabled: true' in
## custom configuration.
  "update":
    Description: A plugin that triggers the updatecfg job
    Path: plugins/update.sh
  "citools":
    Description: Tools for interacting with gopherci
    Privileged: true
    Path: plugins/citools.py
  "ssh-admin":
    Description: Administrative plugin for managing the robot's ssh keypair
    Path: plugins/ssh-admin.sh
    NameSpace: ssh-init
  "weather":
    Description: A plugin that uses OpenWeatherMap to report the weather
    Path: plugins/weather.rb
    Parameters:
    - Name: OWM_APIKEY
      Value: {{ env "GOPHER_OWM_APIKEY" }}
    - Name: TEMP_UNITS
      Value: {{ env "GOPHER_OWM_UNITS" | default "imperial" }} # or 'metric'
    - Name: DEFAULT_COUNTRY
      Value: {{ env "GOPHER_OWM_COUNTRY" | default "us" }} # or other ISO 3166 country code
  "chuck":
    Description: A plugin that pipes up whenever The Man's name is mentioned
    Path: plugins/chuck.rb

## ExternalJobs describe configurable jobs the robot knows about. Requires
## config in conf/jobs/<jobname>.yaml (see sample files in dist)

ExternalJobs:
  "updatecfg":
    Description: A job that updates the robot's configuration from git
    Path: jobs/updatecfg.py
    Parameters:
    - Name: CUSTOM_REPOSITORY_URL
      Value: {{ env "GOPHER_CUSTOM_REPOSITORY" }}
    - Name: CUSTOM_REPOSITORY_BRANCH
      Value: {{ env "GOPHER_CUSTOM_BRANCH" | default "master" }}
  "gopherci":
    Description: A job for dispatching build jobs, triggered by commit notifications
    Path: jobs/gopherci.py
  "localbuild":
    Description: Build job run by gopherci to just clone a repo locally and run .gopherci/pipeline.(sh|py|rb)
    Path: jobs/localbuild.py

## ExternalTasks enumerate external executables that can be added to pipelines
## with AddTask <name>. Note the e.g. the update plugin requires ssh,
## ssh-agent, and git. Unlike Plugins and Jobs, ExternalTasks can have
## NameSpace and Parameters specified, since they don't read external config
## files.

ExternalTasks:
  "notify":
    Description: Send a message to a user in the job channel, generally as a FailTask
    Path: tasks/notify.sh
  "dmnotify":
    Description: Send a DM to a user, generally as a FailTask
    Path: tasks/dmnotify.sh
  "status":
    Decription: trivial task that can be used to send status updates
    Path: tasks/status.sh
  "ssh-init":
    Description: "Pipeline job for setting up ssh-agent for the 'bot"
    Path: tasks/ssh-init.sh
#   Parameters:
##  For specifying a key to use other than id_rsa
#   - Name: KEYNAME
#     Value: otherkey_rsa
  "exec":
    Description: Simple utility for running scripts in a repository
    Path: tasks/exec.sh
  "remote":
    Description: Utility for running scripts and commands on a remote host
    Path: tasks/remote-exec.sh
  "runpipeline":
    Description: Detect one of pipeline.sh|py|rb and add to the pipeline
    Path: tasks/runpipeline.sh
  "setworkdir":
    Description: Update working directory as a step in a pipeline
    Path: tasks/setworkdir.sh
  "ansible-playbook":
    NameSpace: ansible
    Description: Ansible playbook (ansible-playbook) runner with vault passphrase helper
    Path: tasks/ansible-playbook.sh
  "ssh-scan":
    Description: Helper script for adding ssh host keys to known_hosts
    Path: tasks/ssh-scan.sh
  "git-sync":
    Description: Simple script to clone or pull a repository
    Path: tasks/git-sync.sh
  "cleanup":
    Description: Task for removing a repository after a build has completed
    Path: tasks/cleanup.sh

## NOTE: Items below are informational only, and should be defined in the
## custom configuration repository.

## If the plugin doesn't specify an outgoing message format, what's the default?
## This will be 'Raw' (unmodified, subject to protocol-specific formatting) if
## not set. 'Variable' will escape special characters like #, @, _, `, etc. so
## those characters can appear in replies. 'Fixed' will send everything in a
## fixed-width font.
#DefaultMessageFormat: Variable # 'Raw' if not specified

## The robot's email address (used in From:)
#Email: robbie@robot.com

## Configuration for sending out email. For Authtype: none, User and Password
## can be left out. Note that sending email will fail if Email isn't set. Note
## for GMail users - for your robot to send email, you'll need to enable less
## secure apps for the sending account. See:
## https://support.google.com/accounts/answer/6010255

#MailConfig:
#  Mailhost: smtp.gmail.com:587
#  Authtype: plain
#  User: yourbot@your.dom
#  Password: robotpassword

## Use Google Authenticator TOTP by default for elevated commands. To use:
## - Ask the robot to 'send launch codes', and it will send you (one time)
##   a string for configuring your Google Authencticator app, and store it's
##   own copy in the robot's brain. You can verify it works with the
##   'check launch code <code>' command.
## - To require a token to be provided before running a given plugin command,
##   add the elevated command(s) to the plugin's ElevatedCommands list, or to
##   ElevateImmediateCommands for commands that require elevation every time
##   regardless of timeout.
## - Configure the elevator by overriding the config for the plugin in
##   'conf/plugins/totp.yaml'

#DefaultElevator: totp
