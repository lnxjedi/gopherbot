
## This is a the default configuration for gopherbot. Values here can be
## overridden by values in the custom configuration. Primarily configuration
## required on initial load is defined here; most configuration, as well as
## locally defined job/task/plugin scripts, should come from a custom
## configuration repository.

## Template functions:
## default "value":
##   provide a default value if "" or unset is piped in
## env "ENV_VAR":
##   look a value up from the environment
## SetEnv "ENV_VAR" "value"
##   override an environment variable setting for IDE mode (see usage below)
##   -> Note that this is really mainly useful in default configuration,
##      since default is always loaded before custom config.
## decrypt "<encrypted string>":
##   decrypt a value encrypted with the 'encrypt <string>' command
## .Include "<filename>":
##   Include and expand the contents of another file from the same
##   location (installed defaults or custom config)
## GetStartupMode:
##   Examine the execution environment to determine settings for protocol,
##   brain and log destination. Possible values:
##   * setup - no configuration but answerfile.txt/ANS* env present, setup plugin will process
##   * demo - no configuration or env vars, starts the default robot
##   * test-dev - using config dir in gopherbot/test for creating integration tests
##   * bootstrap - env vars (e.g. GOPHER_CUSTOM_REPOSITORY) set, but no config yet
##   * cli - gopherbot CLI command, not starting a real robot
##   * ide - running in the gopherbot IDE for local dev
##   * ide-override - running in the IDE, but robot should connect to team chat
##   * production - env vars set and config repo cloned, the most "normal" start-up

## Port to listen on for http/JSON api calls, for external plugins.
## By default, automatically choose a port.
LocalPort: {{ env "GOPHER_PORT" | default "0" }}

{{- $mode := GetStartupMode }}

## Defaults for "production" and "ide-override" modes
## Protocol - almost always overriden by GOPHER_PROTOCOL
{{- $proto := env "GOPHER_PROTOCOL" | default "terminal" }}
## Brain - normally configured in a robot's custom
## conf/robot.yaml
{{- $brain := env "GOPHER_BRAIN" | default "file" }}
## Rarely overridden.
{{- $logdest := env "GOPHER_LOGDEST" | default "stdout" }}

## No configuration, no environment variables - demo robot
{{- if eq $mode "demo" }}
  {{- $proto = "terminal" }}
  {{- $brain = "mem"}}
  {{- $logdest = "robot.log" }}
## No configuration but GOPHER_CUSTOM_REPOSITORY set, need to clone
{{- else if eq $mode "bootstrap" }}
  {{- $proto = "nullconn" }}
  {{- $brain = "mem"}}
  {{- $logdest = "stdout" }}
## IDE mode, override protocol, brain, logdest
{{- else if or (eq $mode "ide") (eq $mode "test-dev") }}
  {{- $proto = "terminal" }}
  {{- $brain = "mem"}}
  {{- $logdest = "robot.log" }}
## Override environment variables that will affect a
## robot's custom configuration loading
  {{- SetEnv "GOPHER_PROTOCOL" "terminal" }}
  {{- SetEnv "GOPHER_BRAIN" "mem" }}
  {{- SetEnv "GOPHER_LOGDEST" "robot.log" }}
{{- end }}

## Possibly modified by GOPHER_HTTP_DEBUG, see below
{{- $loglevel := env "GOPHER_LOGLEVEL" | default "info" }}

## Enable log level debug messages for localhost http JSON requests and replies
## NOTE: For low-level debugging only - no scrubbing of secrets is performed!
{{- $httpDebug := (eq (env "GOPHER_HTTP_DEBUG") "true") }}
{{- if $httpDebug }}
HttpDebug: true
## These can be overridden by custom config, but this is sane for non-scrubbed
## debugging output.
  {{- $logdest = "robot.log" }}
  {{- $loglevel = "debug" }}
{{- end }}

Protocol: {{ $proto }}
Brain: {{ $brain }}
LogDest: {{ $logdest }}
LogLevel: {{ $loglevel }}

## Trivial "terminal" connector config for a single admin user.
## This pulls in a basic default config for the terminal connector
## which can be overridden in custom if desired.
{{- if eq $proto "terminal" }}
{{ .Include "terminal.yaml" }}
{{- end }}
## Dummy connector for bootstrapping & autosetup
{{- if eq $proto "nullconn" }}
{{ .Include "nullconn.yaml" }}
{{- end }}

## Configure a history provider
{{ $history := env "GOPHER_HISTORY_PROVIDER" | default "mem" }}
HistoryProvider: {{ $history }}

{{ if eq $history "mem" }}
HistoryConfig:
  BufferSize: 131072
  MaxLineLength: 16384
  Truncated: "<... truncated>"
{{ end }}
## End history config

TimeZone: {{ env "GOPHER_TIMEZONE" | default "America/New_York" }}

# Default shared namespaces to allow sharing of parameters between
# various administrative tasks/plugins/jobs
NameSpaces:
  # Needed to prevent dangling reference; parameters need to be in
  # custom config.
  "ssh":
  "manage":
    Parameters:
    - Name: GOPHER_CUSTOM_REPOSITORY
      Value: {{ env "GOPHER_CUSTOM_REPOSITORY" }}
    - Name: GOPHER_DEPLOY_KEY
    # Deployment key with "tr '\n' ':'" - yaml parsing will fail if not quoted
      Value: "{{ env "GOPHER_DEPLOY_KEY" }}"
    - Name: GOPHER_CUSTOM_BRANCH
      Value: {{ env "GOPHER_CUSTOM_BRANCH" | default "." }}
    - Name: GOPHER_STATE_REPOSITORY
      Value: {{ env "GOPHER_STATE_REPOSITORY" }}
    - Name: GOPHER_STATE_BRANCH
      Value: {{ env "GOPHER_STATE_BRANCH" }}
    # A default installed robot stores its memories in state/brain
    - Name: GOPHER_STATEDIR
      Value: {{ env "GOPHER_STATEDIR" | default "state" }}

ParameterSets:

{{ if not (env "GOPHER_UNCONFIGURED") }}
ScheduledJobs:
- Name: go-bootstrap
  Schedule: "@init"
{{- end }}

## NOTE:
## External script jobs/tasks/plugins do NOT have direct access to
## environment variables, but instead get a combination of:
## - vars explicitly propagated such as $HOME
## - vars defined in "Parameters" (see below)

ExternalPlugins:
## Useful and/or entertaining plugins; disable by setting 'Disabled: true' in
## custom configuration.
  "admin":
    Description: A plugin that triggers management jobs like update, save, backup, etc.
    Privileged: true
    Path: plugins/admin.sh
  "knock":
    Description: An external Go plugin demonstrating Prompting and custom configuration
    Path: plugins/go-knock/knock.go
    Homed: true
  "lists":
    Description: An external Go plugin for managing simple lists of strings
    Path: plugins/go-lists/lists.go
    Homed: true
  "links":
    Description: An external Go plugin for sharing bookmark links
    Path: plugins/go-links/links.go
    Homed: true
  "memes":
    Description: An external Go plugin demonstrating Prompting and custom configuration
    Path: plugins/go-meme/memes.go
    Homed: true
  "ssh-admin":
    Description: Administrative plugin for managing the robot's ssh keypair
    Path: plugins/ssh-admin.sh
    Privileged: true
    NameSpace: ssh
{{- if env "GOPHER_UNCONFIGURED" }}
  {{- if eq $proto "terminal" }}
  "welcome":
    Description: The welcome plugin provides a greeting when unconfigured
    Privileged: true
    Path: plugins/welcome.sh
  {{- end }}
  "autosetup":
    Description: Setup plugin for creating a new robot from an answerfile
    Privileged: true
    Homed: true
    NameSpace: manage
    Path: plugins/autosetup.sh
    Parameters:
    - Name: GOPHER_ENCRYPTION_INITIALIZED
      Value: {{ env "GOPHER_ENCRYPTION_INITIALIZED" }}
    - Name: GOPHER_CONTAINER
      Value: {{ env "GOPHER_CONTAINER" }}
    {{- if env "GOPHER_CONTAINER" }}
    # pass-through all ANS_ vars...
    - Name: ANS_PROTOCOL
      Value: '{{ env "ANS_PROTOCOL" }}'
    - Name: ANS_ENCRYPTION_KEY
      Value: '{{ env "ANS_ENCRYPTION_KEY" }}'
    - Name: ANS_SLACK_TOKEN
      Value: '{{ env "ANS_SLACK_TOKEN" }}'
    - Name: ANS_ROBOT_NAME
      Value: '{{ env "ANS_ROBOT_NAME" }}'
    - Name: ANS_ROBOT_ALIAS
      Value: '{{ env "ANS_ROBOT_ALIAS" }}'
    - Name: ANS_JOB_CHANNEL
      Value: '{{ env "ANS_JOB_CHANNEL" }}'
    - Name: ANS_ROBOT_EMAIL
      Value: '{{ env "ANS_ROBOT_EMAIL" }}'
    - Name: ANS_SSH_PHRASE
      Value: '{{ env "ANS_SSH_PHRASE" }}'
    - Name: ANS_KEY_TYPE
      Value: '{{ env "ANS_KEY_TYPE" }}'
    - Name: ANS_ROBOT_REPOSITORY
      Value: '{{ env "ANS_ROBOT_REPOSITORY" }}'
    - Name: ANS_ADMIN_SECRET
      Value: '{{ env "ANS_ADMIN_SECRET" }}'
    {{- end }}
{{- end }}

GoPlugins:
  "builtin-help":
    Description: A plugin providing help for commands
    NameSpace: manage

## Only for compiled-in Go jobs, all current Go jobs are external and dynamic, see
## below.
GoJobs:
  "go-bootstrap":
    Description: A compiled-in job to bootstrap an existing robot to a new container/directory
    NameSpace: manage

## ExternalJobs describe configurable jobs the robot knows about. Requires
## config in conf/jobs/<jobname>.yaml (see sample files in dist)
ExternalJobs:
  "go-update":
    Description: A dynamic external job to update the robot's configuration (git pull)
    Path: jobs/go-update/go_update_job.go
    NameSpace: manage
    Homed: true # default with a log WARN, so make it explicit
  "updatecfg":
    Description: A compatibility job that only starts the go-update job
    Homed: true # default with a log WARN, so make it explicit
    Path: jobs/updatecfg/updatecfg.go
  "go-switchbranch":
    Description: A job that lets the robot switch branches for development
    Homed: true
    NameSpace: manage
    Path: jobs/go-switchbranch/switchbranches.go
  "save":
    Description: A job for saving up the robot's configuration
    Homed: true
    NameSpace: manage
    Path: jobs/save.sh
  "install-libs":
    Description: A job for installing ruby gems and python packages
    Homed: true
    Path: jobs/install-libs.sh
  "backup":
    Description: A job for backing up the robot's state, normally just a file-based brain
    Homed: true
    NameSpace: manage
    Path: jobs/backup.sh
  "restore":
    Description: A job for restoring the robot's state from git
    Homed: true
    NameSpace: manage
    Path: jobs/restore.sh
  "logrotate":
    Description: Log rotation for file logging, schedule daily
    Path: jobs/logrotate.sh
  "ssh-job":
    Description: Wrapper for ssh jobs.
    Path: jobs/ssh-job.sh

## ExternalTasks enumerate external executables that can be added to pipelines
## with AddTask <name>. Note the e.g. the update plugin requires ssh,
## ssh-agent, and git.
ExternalTasks:
  "notify":
    Description: Send a message to a user in the job channel, generally as a FailTask
    Path: tasks/notify.sh
  "dmnotify":
    Description: Send a DM to a user, generally as a FailTask
    Path: tasks/dmnotify.sh
  "status":
    Description: Trivial task that can be used to send status updates in a pipeline
    Path: tasks/status.sh
  "say":
    Description: Convenience synonym for 'status'
    Path: tasks/status.sh
  "reply":
    Description: Trivial task to reply to the user with a message
    Path: tasks/reply.sh
  "ssh-task":
    Description: Wrapper for ssh tasks
    Path: jobs/ssh-job.sh
    Privileged: true
  "exec":
    Description: Simple utility for running scripts in a repository
    Path: tasks/exec.sh
  "remote":
    Description: Utility for running scripts and commands on a remote host
    Path: tasks/remote-exec.sh
  "setworkdir":
    Description: Update working directory as a step in a pipeline
    Path: tasks/setworkdir.sh
