
## This is a the default configuration for gopherbot. Values here can be
## overridden by values in the custom configuration. Primarily configuration
## required on initial load is defined here; most configuration, as well as
## locally defined job/task/plugin scripts, should come from a custom
## configuration repository.

## Template functions:
## default "value":
##   provide a default value if "" or unset is piped in
## env "ENV_VAR":
##   look a value up from the environment
## decrypt "<encrypted string>":
##   decrypt a value encrypted with the 'encrypt <string>' command
## .Include "<filename>":
##   Include and expand the contents of another file from the same
##   location (installed defaults or custom config)

## Port to listen on for http/JSON api calls, for external plugins.
## By default, automatically choose a port.
LocalPort: {{ env "GOPHER_PORT" | default "0" }}

{{ $proto := env "GOPHER_PROTOCOL" | default "nullconn" }}
Protocol: {{ $proto }}
## Trivial "terminal" connector config for a single admin user.
## This pulls in a basic default config for the terminal connector
## which can be overridden in custom if desired.
{{ if eq $proto "terminal" }}
{{ .Include "terminal.yaml" }}
{{ end }}
## Dummy connector for bootstrapping & autosetup
{{ if eq $proto "nullconn" }}
{{ .Include "nullconn.yaml" }}
{{ end }}

## Configure log level
LogLevel: {{ env "GOPHER_LOGLEVEL" | default "info" }}

TimeZone: {{ env "GOPHER_TIMEZONE" | default "America/New_York" }}

# Default shared namespaces to allow sharing of parameters between
# various administrative tasks/plugins/jobs
NameSpaces:
  # Needed to prevent dangling reference; parameters need to be in
  # custom config.
  "ssh":
    Parameters:
    - Name: "KEYNAME"
      Value: "robot_key"
  "manage":
    Parameters:
    - Name: GOPHER_CUSTOM_REPOSITORY
      Value: {{ env "GOPHER_CUSTOM_REPOSITORY" }}
    - Name: GOPHER_CUSTOM_BRANCH
      Value: {{ env "GOPHER_CUSTOM_BRANCH" | default "master" }}
    - Name: GOPHER_STATE_REPOSITORY
      Value: {{ env "GOPHER_STATE_REPOSITORY" }}
    - Name: GOPHER_STATE_BRANCH
      Value: {{ env "GOPHER_STATE_BRANCH" }}
    # A default installed robot stores its brain in state/brain
    - Name: GOPHER_STATEDIR
      Value: {{ env "GOPHER_STATEDIR" | default "state" }}

{{ if env "GOPHER_UNCONFIGURED" }}
LoadableModules:
  # Make the default terminal robot a little more fun
  "knock":
    Description: Knock knock jokes!
    Path: goplugins/knock.so
{{ else }}
EncryptBrain: true
{{ end }}

## NOTE:
## External script jobs/tasks/plugins do NOT have direct access to
## environment variables, but instead get a combination of:
## - vars explicitly propagated such as $HOME
## - vars defined in "Parameters" (see below)

ExternalPlugins:
## Useful and/or entertaining plugins; disable by setting 'Disabled: true' in
## custom configuration.
  "admin":
    Description: A plugin that triggers management jobs like update, save, backup, etc.
    Privileged: true
    Path: plugins/admin.sh
  "citools":
    Description: Tools for interacting with gopherci
    Privileged: true
    Path: plugins/citools.py
  "ssh-admin":
    Description: Administrative plugin for managing the robot's ssh keypair
    Path: plugins/ssh-admin.sh
    Privileged: true
    NameSpace: ssh
{{ if env "GOPHER_UNCONFIGURED" }}
  {{- if eq $proto "terminal" }}
  "welcome":
    Description: The welcome plugin provides a greeting when unconfigured
    Path: plugins/welcome.sh
  {{- end }}
  "autosetup":
    Description: Setup plugin for creating a new robot from an answerfile
    Privileged: true
    Homed: true
    NameSpace: manage
    Path: plugins/autosetup.sh
    Parameters:
    - Name: GOPHER_ENCRYPTION_INITIALIZED
      Value: {{ env "GOPHER_ENCRYPTION_INITIALIZED" }}
    - Name: GOPHER_CONTAINER
      Value: {{ env "GOPHER_CONTAINER" }}
    {{- if env "GOPHER_CONTAINER" }}
    # pass-through all ANS_ vars...
    - Name: ANS_PROTOCOL
      Value: '{{ env "ANS_PROTOCOL" }}'
    - Name: ANS_ENCRYPTION_KEY
      Value: '{{ env "ANS_ENCRYPTION_KEY" }}'
    - Name: ANS_SLACK_TOKEN
      Value: '{{ env "ANS_SLACK_TOKEN" }}'
    - Name: ANS_ROBOT_NAME
      Value: '{{ env "ANS_ROBOT_NAME" }}'
    - Name: ANS_ROBOT_ALIAS
      Value: '{{ env "ANS_ROBOT_ALIAS" }}'
    - Name: ANS_JOB_CHANNEL
      Value: '{{ env "ANS_JOB_CHANNEL" }}'
    - Name: ANS_ROBOT_EMAIL
      Value: '{{ env "ANS_ROBOT_EMAIL" }}'
    - Name: ANS_SSH_PHRASE
      Value: '{{ env "ANS_SSH_PHRASE" }}'
    - Name: ANS_KEY_TYPE
      Value: '{{ env "ANS_KEY_TYPE" }}'
    - Name: ANS_ROBOT_REPOSITORY
      Value: '{{ env "ANS_ROBOT_REPOSITORY" }}'
    - Name: ANS_ADMIN_SECRET
      Value: '{{ env "ANS_ADMIN_SECRET" }}'
    {{ end }}
{{ else }}
  "bootstrap":
    Description: A plugin to bootstrap an existing robot to a new container/directory
    Privileged: true
    Homed: true
    NameSpace: manage
    Path: plugins/bootstrap.py
    Parameters:
    - Name: GOPHER_DEPLOY_KEY
    # Deployment key with "tr '\n' ':'" - yaml parsing will fail if not quoted
      Value: "{{ env "GOPHER_DEPLOY_KEY" }}"
{{ end }}

## ExternalJobs describe configurable jobs the robot knows about. Requires
## config in conf/jobs/<jobname>.yaml (see sample files in dist)
ExternalJobs:
  "updatecfg":
    Description: A job that updates the robot's configuration from git
    Homed: true
    NameSpace: manage
    Path: jobs/updatecfg.py
  "save":
    Description: A job for saving up the robot's configuration
    Homed: true
    Privileged: true
    NameSpace: manage
    Path: jobs/save.sh
  "backup":
    Description: A job for backing up the robot's state, normally just a file-based brain
    Homed: true
    Privileged: true
    NameSpace: manage
    Path: jobs/backup.sh
  "restore":
    Description: A job for restoring the robot's state from git
    Homed: true
    Privileged: true
    NameSpace: manage
    Path: jobs/restore.sh
  "logrotate":
    Description: Log rotation for file logging, schedule daily
    Path: jobs/logrotate.sh
  "gopherci":
    Description: A job for dispatching build jobs, triggered by commit notifications
    Path: jobs/gopherci.py
  "localbuild":
    Description: Build job run by gopherci to just clone a repo locally and run .gopherci/pipeline.(sh|py|rb)
    Path: jobs/localbuild.py

## ExternalTasks enumerate external executables that can be added to pipelines
## with AddTask <name>. Note the e.g. the update plugin requires ssh,
## ssh-agent, and git.
ExternalTasks:
  "notify":
    Description: Send a message to a user in the job channel, generally as a FailTask
    Path: tasks/notify.sh
  "dmnotify":
    Description: Send a DM to a user, generally as a FailTask
    Path: tasks/dmnotify.sh
  "status":
    Decription: Trivial task that can be used to send status updates in a pipeline
    Path: tasks/status.sh
  "say":
    Description: Convenience synonym for 'status'
    Path: tasks/status.sh
  "git-init":
    Description: >
      Check for and initialize ssh for a repository if needed, check for
      GOPHER_CONFIGDIR/git/config and set XDG_CONFIG_HOME
    Path: tasks/git-init.py
    Homed: true
  "ssh-init":
    Description: "Pipeline job for setting up ssh-agent for the 'bot"
    Path: tasks/ssh-init.sh
    Homed: true
    NameSpace: ssh
  "exec":
    Description: Simple utility for running scripts in a repository
    Path: tasks/exec.sh
  "remote":
    Description: Utility for running scripts and commands on a remote host
    Path: tasks/remote-exec.sh
  "run-pipeline":
    Description: Detect one of pipeline.sh|py|rb and add to the pipeline
    Path: tasks/runpipeline.sh
  "setworkdir":
    Description: Update working directory as a step in a pipeline
    Path: tasks/setworkdir.sh
  "ansible-playbook":
    Description: Ansible playbook (ansible-playbook) runner with vault passphrase helper
    Path: tasks/ansible-playbook.sh
  "ssh-scan":
    Description: Helper script for adding ssh host keys to known_hosts
    Homed: true
    Path: tasks/ssh-scan.sh
  "git-clone":
    Description: Simple script to clone a repository and optionally set the working directory
    Path: tasks/git-clone.sh
  "cleanup":
    Description: Task for cleaning a working directory before starting a job/build
    Privileged: true
    Path: tasks/cleanup.sh
  