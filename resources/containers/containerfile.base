FROM docker.io/amazonlinux:2023

#######
#
# containerfile.base - base container build for Gopherbot development
# and running production Robots built from Gopherbot. Automatically built
# every week.
# See also: containerfile.dev
#
#######

ARG OVSC_ORG="gitpod-io"
ARG OPENVSCODE_SERVER_ROOT="/home/.openvscode-server"
ARG USERNAME=bot
ARG USER_UID=1001
ARG USER_GID=$USER_UID

RUN dnf install -y \
        bash-completion \
        diffutils \
        gcc \
        git-core \
        gzip \
        jq \
        less \
        libyaml-devel \
        make \
        openssh-clients \
        openssl \
        procps-ng \
        python3-pip \
        python3-devel \
        ruby \
        ruby-devel \
        tar \
        telnet \
        which \
    && \
  	dnf clean all && \
  	rm -rf /var/cache/yum

RUN TINI_LATEST=$(curl --silent https://api.github.com/repos/krallin/tini/releases/latest | jq -r .tag_name) && \
    curl -s -L -o tini https://github.com/krallin/tini/releases/download/$TINI_LATEST/tini-amd64 && \
    install -m 0755 tini /usr/local/bin && \
    rm -f tini

# NOTE: My little bit of research indicated rpdb would probably be easiest
# to use for Python script debugging in Gopherbot. If you're a pythonista
# and want to make a case for, say, debugpy - I'd be happy to chat with you.
RUN gem install -N debug && \
    pip install setuptools wheel && \
    pip install rpdb

WORKDIR /home/

# Downloading the latest VSC Server release and extracting the release archive
# Rename `openvscode-server` cli tool to `code` for convenience
RUN OVSC_LATEST=$(curl --silent https://api.github.com/repos/${OVSC_ORG}/openvscode-server/releases/latest | jq -r .tag_name) && \
    arch=$(uname -m) && \
    if [ "${arch}" = "x86_64" ]; then \
        arch="x64"; \
    elif [ "${arch}" = "aarch64" ]; then \
        arch="arm64"; \
    elif [ "${arch}" = "armv7l" ]; then \
        arch="armhf"; \
    fi && \
    curl -s -L -o ${OVSC_LATEST}-linux-${arch}.tar.gz https://github.com/${OVSC_ORG}/openvscode-server/releases/download/${OVSC_LATEST}/${OVSC_LATEST}-linux-${arch}.tar.gz && \
    tar -xzf ${OVSC_LATEST}-linux-${arch}.tar.gz && \
    mv -f ${OVSC_LATEST}-linux-${arch} ${OPENVSCODE_SERVER_ROOT} && \
    cp ${OPENVSCODE_SERVER_ROOT}/bin/remote-cli/openvscode-server ${OPENVSCODE_SERVER_ROOT}/bin/remote-cli/code && \
    rm -f ${OVSC_LATEST}-linux-${arch}.tar.gz

RUN cd /usr/local && \
    GO_LATEST=$(curl --silent https://go.dev/VERSION?m=text | head -1) && \
    curl -s -L -o go.tar.gz https://dl.google.com/go/${GO_LATEST}.linux-amd64.tar.gz && \
    tar xzf go.tar.gz && \
    rm -f go.tar.gz

RUN MDBOOK_LATEST=$(curl --silent https://api.github.com/repos/rust-lang/mdBook/releases/latest | jq -r .tag_name) && \
    curl -s -L -o mdbook.tar.gz https://github.com/rust-lang/mdBook/releases/download/${MDBOOK_LATEST}/mdbook-${MDBOOK_LATEST}-x86_64-unknown-linux-gnu.tar.gz && \
    tar xzf mdbook.tar.gz && \
    install -m 0755 mdbook /usr/local/bin && \
    rm -f mdbook mdbook.tar.gz

# Creating the user and usergroup
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USERNAME -m -s /bin/bash $USERNAME

RUN chmod g+rw /home && \
    chown -R $USERNAME:$USERNAME ${OPENVSCODE_SERVER_ROOT}

# For kubernetes
USER ${USER_UID}:${USER_GID}

# Install language extensions
RUN /home/.openvscode-server/bin/openvscode-server --install-extension golang.Go && \
    /home/.openvscode-server/bin/openvscode-server --install-extension shopify.ruby-lsp && \
    /home/.openvscode-server/bin/openvscode-server --install-extension sumneko.lua && \
    /home/.openvscode-server/bin/openvscode-server --install-extension ms-python.python

WORKDIR /home/${USERNAME}

ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    EDITOR=code \
    VISUAL=code \
    GIT_EDITOR="code --wait" \
    OPENVSCODE_SERVER_ROOT=${OPENVSCODE_SERVER_ROOT} \
    HOME=/home/${USERNAME} \
    PATH=/usr/local/go/bin:${PATH}:/home/${USERNAME}/go/bin:/home/${USERNAME}/.local/bin

RUN go install -v golang.org/x/tools/gopls@latest && \
    go install -v honnef.co/go/tools/cmd/staticcheck@latest

EXPOSE 7777

ENTRYPOINT [ "/usr/local/bin/tini", "--", "/bin/sh", "-c", "exec ${OPENVSCODE_SERVER_ROOT}/bin/openvscode-server --host 0.0.0.0 --port 7777 \"${@}\"", "--" ]
